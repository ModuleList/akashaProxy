#!/system/bin/sh

scripts=`realpath $0`
scripts_dir=`dirname ${scripts}`
. /data/clash/clash.config
rm -rf ${CFM_logs_file}


update_file() {
    file="$1"
    file_temp="${file}.temp"
    update_url="$2"

    curl -L ${update_url} -o ${file_temp}

    if [ -f "${file_temp}" ]; then
        mv -f ${file_temp} ${file}
        log "info: ${file}更新成功."
    else
        rm -rf ${file_temp}
        log "warn: ${file}更新失败"
        return 1
    fi
}
edit_tun() {
    uidlist=""
    ip4list=""
    ip6list=""
    
    if [ "${Clash_auto_route}" != "true" ];then
        addition="auto-route: true"
    else
        addition=""
    fi
    
    if [ "${mode}" != "global" ]; then
        apps=`cat ${filter_packages_file} | sort -u`

        for appuid in ${apps} ; do
            if [ "$(grep ":" <<< ${appuid})" ] && [ "$(grep "[0-9].*\." <<< ${appuid})" ];then
                iplist="${iplist}\n    - ${appuid}"
                continue
            fi
            if [ "$(grep ${appuid} ${system_packages_file})" == "" ];then
                log "warn: ${appuid}未找到."
                continue
            fi
            uidlist="${uidlist}\n    - ${appuid}"
            if [ "${mode}" == "blacklist" ]; then
                log "info: ${appuid}已排除."
            else
                log "info: ${appuid}已代理."
            fi
        done
        
        if [ "${mode}" == "blacklist" ]; then
            if [ "${uidlist}" != "" ]; then
                uid="\n  exclude-package:${uidlist}"
            fi
            if [ "${iplist}" != "" ]; then
                ipline="\n  route-address:${iplist}"
            fi
        elif [ "${mode}" == "whitelist" ] ; then
            if [ "${uidlist}" != "" ]; then
                uid="\n  include-package:${uidlist}"
            fi
            if [ "${iplist}" != "" ]; then
                ipline="\n  inet4-route-address:${iplist}"
            fi
        fi
        addition="${addition}${uid}${ipline}"
    fi
    sed -i "${Clash_tun_line}a\  ${addition}" ${temporary_config_file}
    log "info: 已自动覆写clash配置"
}

start_clash() {

    if [ -f "${Clash_config_file}.example" ];then
        log "err: 请将预设配置(clash.yaml.example)重命名为clash.yaml后填写正确配置."
        exit 1
    fi

    if [ ! -f ${Clash_config_file} ];then
        log "err: 缺少config.yaml 配置文件."
        exit 1
    fi

    mkdir -p ${Clash_run_path}
    cp -f ${Clash_config_file} ${temporary_config_file}

    if [ ${adguard} == "true" ];then
        if [ ! -f "${Adguard_bin_path}" ];then
            log "err: 已开启 AdGuard Home 拓展但未找到 AdGuard Home 文件!"
            exit 1
        fi
    fi

    
    if [ "${ipv6}" = "false" ] ; then
        for net in /proc/sys/net/ipv6/conf/{wlan*,*data*} ; do
            echo ${net} | grep -q wlan
            if [ $? -eq 0 ] ; then
                echo 0 > ${net}/accept_ra
            fi
            echo 1 > ${net}/disable_ipv6
        done
    else
        for net in /proc/sys/net/ipv6/conf/{wlan*,*data*} ; do
            echo ${net} | grep -q wlan
            if [ $? -eq 0 ] ; then
                echo 1 > ${net}/accept_ra
            fi
            echo 0 > ${net}/disable_ipv6
        done
        log "info: 已开启代理ipv6"
    fi
    
    if [ "${udp}" = "true" ] ; then
        log "info: 已开启代理udp"
    fi

    pid=`cat ${Clash_pid_file} 2> /dev/null`
    if (cat /proc/${pid}/cmdline | grep -q clash) ; then
        log "info: 检测到clash已启动,此次不启动."
        exit 1
    fi
    
    if [ ${adguard} == "true" ];then
        pid=`cat ${Adguard_pid_file} 2> /dev/null`
        if (cat /proc/${pid}/cmdline | grep -q AdGuardHome) ; then
            log "info: 检测到AdGuardHome已启动,此次不启动."
            exit 1
        fi
    fi
    
    
    if [ "${Clash_tproxy_port}" == 0 ] || [ "${Clash_tproxy_port}" == ""  ]; then
        if [ "${Clash_tun_status}" != "true" ]; then
            log "err: tproxy和tun得二选一."
            exit 1
        fi
    fi
    if [ -f "${Clash_bin_path}" ] ; then
        mkdir -p ${Clash_run_path}
        chown ${Clash_user_group} ${Clash_bin_path}
        chmod ${Clash_permissions} ${Clash_bin_path}
        if [ ${adguard} == "true" ];then
            chown ${Clash_user_group} ${Adguard_bin_path}
            chmod ${Clash_permissions} ${Adguard_bin_path}
        fi
        chown ${Clash_user_group} ${temporary_config_file}
        chmod 0644 ${temporary_config_file}
        rm -rf ${Clash_run_path}/root
        touch ${Clash_run_path}/root
        chmod 777 ${Clash_run_path}/root
        if [ "${Geo_auto_update}" != "true" ];then
            if [ "${auto_updateGeoSite}" == "true" ]; then
                echo "${update_geoXInterval} ${scripts_dir}/clash.tool -u" >> ${Clash_run_path}/root \
                && log "info: 自动更新GeoX定时已开启."
            fi
        else
            log "info: 核心已开启自动更新GeoX 模块不进行操作."
        fi
        if [ "${auto_updateSubcript}" == "true" ]; then
            echo "${update_subcriptInterval} ${scripts_dir}/clash.tool -s" >> ${Clash_run_path}/root \
            && log "info: 自动更新订阅定时已开启."
        fi
        if [ "${auto_updateclashMeta}" == "true" ] || [ "${Geo_auto_update}" != "true" ]; then
            echo "${update_geoXInterval} ${scripts_dir}/clash.tool -u" >> ${Clash_run_path}/root \
            && log "info: 自动更新clashMeta内核定时已开启."
        else
            log "info: 自动更新clashMeta内核定时已开启."
        fi

        sed -i '/^[  ]*$/d' ${CFM_logs_file}
        if [ "${filter_local}" = "true" ] ; then
            com="${scripts_dir}/clash.tool -m ; sleep 10 ;${scripts_dir}/clash.tool -m ; sleep 10; ${scripts_dir}/clash.tool -m ;sleep 10; ${scripts_dir}/clash.tool -m;sleep 10;${scripts_dir}/clash.tool -m ; sleep 10;${scripts_dir}/clash.tool -m"
            echo "*/1 * * * * ${com}" >> ${Clash_run_path}/root && log "info: 自动绕过本地ip段已打开."
        fi
    else
        if [ ${Clash_bin_name} == "clashMeta" ];then
            log "err: ${Clash_bin_name}内核丢失 正在更新..."
            ${scripts_dir}/clash.tool -u
            start_clash
        else
            log "err: ${Clash_bin_name}内核丢失."
        fi
        exit 1
    fi
    
    if [ ${ml} == "true" ];then
        if [ ! -f ${Clash_run_path}/ip.dat ];then
            log "info: 正在获取免流ip..."
            baidumlip=$(${busybox_path} ping -c 1 cloudnproxy.baidu.com | sed '1{s/[^(]*(//;s/).*//;q}')
            txmlip=$(${busybox_path} ping -c 1 weixin.qq.com | sed '1{s/[^(]*(//;s/).*//;q}')
            echo "baidumlip=${baidumlip}\ntxmlip=${txmlip}">${Clash_run_path}/ip.dat
        else
            log "info: 已从缓存文件中获取免流ip"
            . ${Clash_run_path}/ip.dat
        fi
    fi
    if [ ${proxyGoogle} == "true" ];then
        if [ ! -f ${Clash_run_path}/Google.dat ];then
            log "info: 正在获取本机所有Google系app..."
            echo "\n">${Clash_run_path}/Google.dat
            for packages in $(pm list packages |awk -F : '{print$NF}')$(pm list packages -s |awk -F : '{print$NF}')
            do
                echo $packages | grep "google">>${Clash_run_path}/Google.dat
                echo $packages | grep "com.android.vending">>${Clash_run_path}/Google.dat
            done
        else
            log "info: 已从缓存文件中获取本机所有Google系app"
        fi
    fi
    if [ ${ml} == "true" ];then    
        log "info: 当前百度系免流ip:${baidumlip}"
        log "info: 当前腾讯系免流ip:${txmlip}"
    fi
    
    if [ "${Clash_tun_status}" == "true" ];then
        if [ "${auto_config}" == "true" ] && [  "${auto_tun}" == "true" ];then
            edit_tun
        fi
    fi
    
    if [ ${ml} == "true" ];then
        sed -i "s/百度系免流ip/${baidumlip}/g" ${temporary_config_file}
        sed -i "s/腾讯系免流ip/${txmlip}/g" ${temporary_config_file}
    fi
    if [ ! -f ${Clash_GeoIP_file} ];then
        log "err: 缺少GeoIP资源文件 正在自动下载."
        update_file ${Clash_GeoIP_file} ${GeoIP_url}
    fi
    if [ ! -f ${Clash_GeoSite_file} ];then
        log "err: 缺少GeoSite资源文件 正在自动下载."
        update_file ${Clash_GeoSite_file} ${GeoSite_url}
    fi
    clasherror=$(${Clash_bin_path} -d ${Clash_data_dir} -f ${temporary_config_file} -t)
    if [ -f ${temporary_config_file} ]; then
        if $(${Clash_bin_path} -d ${Clash_data_dir} -t -f ${temporary_config_file} > /dev/null) ; then
            if [ "${Clash_tun_status}" == "true" ]; then
                mkdir -p /dev/net
                ln -sf /dev/tun /dev/net/tun
            fi
            mv /data/clash/run/kernel.log /data/clash/run/kernel.old.log
            ulimit -SHn 1000000
            if [ ${adguard} == "true" ];then
                nohup ${busybox_path} setuidgid ${Clash_user_group} ${Adguard_bin_path} -w ${Clash_run_path} -c ${Adguard_config_file} --pidfile ${Adguard_pid_file} -l /data/clash/run/adg.log 2>&1 &
            fi
            nohup ${busybox_path} setuidgid ${Clash_user_group} ${Clash_bin_path} -d ${Clash_data_dir} -f ${temporary_config_file} > /data/clash/run/kernel.log 2>&1 &
            echo "$(${busybox_path} pidof ${Clash_bin_path})">${Clash_pid_file}
            cp -Rf /data/clash /data/clash.old
            log "info: 代理模式:${mode}"
            if [ ${adguard} == "true" ];then
                log "info: adguard home已启动"
            fi
            log "info: ${Clash_bin_name}内核已启动."
        else
            log "err: 配置有误，启动失败."
            log "err: 下面是错误日志"
            log "err: ${clasherror}"
            exit 1
        fi
    else
        log "info: 配置文件合并失败."
        exit 1
    fi


    if [ "${Clash_tun_status}" == "true" ]; then
        return
    fi
    if [ "${Clash_port_skipdetection}" == "false" ]; then
        sleep ${WaitClashStartTime}
        if ! (${scripts_dir}/clash.tool -p) ; then
            kill -15 `cat ${Clash_pid_file}`
            log "err: 端口未检测到,已停止${Clash_bin_name}内核以及后续逻辑."
            if [ ${adguard} == "true" ];then
                kill -15 `cat ${Adguard_pid_file}`
                log "err: 已停止adguard home内核."
            fi
            rm -rf ${Clash_pid_file}
            exit 1
        fi
    else
    log "info: 已跳过端口检查."
    fi
}

stop_clash() {
    kill -15 `cat ${Clash_pid_file}`
    log "info: 已停止${Clash_bin_name}内核."
    if [ ${adguard} == "true" ];then
        kill -15 `cat ${Adguard_pid_file}`
        log "info: 已停止adguard home内核."
    fi
}

while getopts ":sk" signal ; do
    case ${signal} in
        s)
            start_clash
            ;;
        k)
            stop_clash
            ;;
        ?)
            echo ""
            ;;
    esac
done
