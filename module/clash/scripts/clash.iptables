#!/system/bin/sh

script_path=$(realpath "$0")
script_dir=$(dirname "${script_path}")
. /data/clash/clash.config

create_route_rules() {
    ip -4 rule add fwmark "${mark_id}" table "${table_id}" pref "${pref_id}" || return 1
    ip -4 route add local default dev lo table "${table_id}" || return 1
    
    [ "${ipv6}" = "true" ] && {
        ip -6 rule add fwmark "${mark_id}" table "${table_id}" pref "${pref_id}" || return 1
        ip -6 route add local default dev lo table "${table_id}" || return 1
    }
}

flush_route_rules() {
    ip rule del fwmark "${mark_id}" table "${table_id}" 2>/dev/null
    ip route flush table "${table_id}" 2>/dev/null
    
    [ "${ipv6}" = "true" ] && {
        ip -6 rule del fwmark "${mark_id}" table "${table_id}" 2>/dev/null
        ip -6 route flush table "${table_id}" 2>/dev/null
    }
}

create_mangle_prerouting() {
    "${iptables_wait}" -t mangle -N CLASH_PRE || return 1
    
    for subnet in ${reserved_ip[*]}; do
        "${iptables_wait}" -t mangle -A CLASH_PRE -d "${subnet}" -j ACCEPT
    done
    
    "${iptables_wait}" -t mangle -A CLASH_PRE -p tcp -j TPROXY \
        --on-port "${clash_tproxy_port}" --tproxy-mark "${mark_id}" || log "不支持TCP透明代理"
    
    "${iptables_wait}" -t mangle -A CLASH_PRE -p udp ! --dport 53 -j TPROXY \
        --on-port "${clash_tproxy_port}" --tproxy-mark "${mark_id}" || log "不支持UDP透明代理"
    
    [ "${ipv6}" = "true" ] && {
        "${ip6tables_wait}" -t mangle -N CLASH_PRE || return 1
        
        for subnet in ${reserved_ip6[*]}; do
            "${ip6tables_wait}" -t mangle -A CLASH_PRE -d "${subnet}" -j ACCEPT
        done
        
        "${ip6tables_wait}" -t mangle -A CLASH_PRE -p tcp -j TPROXY \
            --on-port "${clash_tproxy_port}" --tproxy-mark "${mark_id}" || log "不支持IPv6 TCP透明代理"
            
        "${ip6tables_wait}" -t mangle -A CLASH_PRE -p udp ! --dport 53 -j TPROXY \
            --on-port "${clash_tproxy_port}" --tproxy-mark "${mark_id}" || log "不支持IPv6 UDP透明代理"
    }
}

setup_tun_mode() {
    ip -4 rule add fwmark "${mark_id}" table "${table_id}" pref "${pref_id}" || return 1
    
    while [ "$(ip -4 route show table "${table_id}" 2>/dev/null)" = "" ]; do
        ip -4 route add default dev "${tun_device}" table "${table_id}" || return 1
    done
    
    "${iptables_wait}" -I FORWARD -o "${tun_device}" -j ACCEPT || return 1
    "${iptables_wait}" -I FORWARD -i "${tun_device}" -j ACCEPT || return 1
    
    "${iptables_wait}" -t mangle -N CLASH_PRE || return 1
    
    for subnet in ${reserved_ip[*]}; do
        "${iptables_wait}" -t mangle -A CLASH_PRE -d "${subnet}" -j RETURN
    done
    
    "${iptables_wait}" -t mangle -A CLASH_PRE -j MARK --set-xmark "${mark_id}" || return 1
    "${iptables_wait}" -t mangle -A PREROUTING -j CLASH_PRE || return 1
    
    "${iptables_wait}" -t mangle -N CLASH_OUT || return 1
    "${iptables_wait}" -t mangle -A CLASH_OUT -m owner --uid-owner "${clash_user}" --gid-owner "${clash_group}" -j RETURN || return 1
    
    local apps=$(sort -u "${appuid_file}")
    if [ "${mode}" = "blacklist" ]; then
        for appuid in ${apps}; do
            "${iptables_wait}" -t mangle -A CLASH_OUT -m owner --uid-owner "${appuid}" -j RETURN
        done
        "${iptables_wait}" -t mangle -A CLASH_OUT -j MARK --set-xmark "${mark_id}" || return 1
    elif [ "${mode}" = "whitelist" ]; then
        for appuid in ${apps}; do
            "${iptables_wait}" -t mangle -A CLASH_OUT -m owner --uid-owner "${appuid}" -j MARK --set-xmark "${mark_id}"
        done
    fi
    
    "${iptables_wait}" -t mangle -A OUTPUT -j CLASH_OUT || return 1
    
    [ "${ipv6}" = "true" ] && {
        ip -6 rule add fwmark "${mark_id}" table "${table_id}" pref "${pref_id}" || return 1
        
        while [ "$(ip -6 route show table "${table_id}" 2>/dev/null)" = "" ]; do
            ip -6 route add default dev "${tun_device}" table "${table_id}" || return 1
        done
        
        "${ip6tables_wait}" -I FORWARD -o "${tun_device}" -j ACCEPT || return 1
        "${ip6tables_wait}" -I FORWARD -i "${tun_device}" -j ACCEPT || return 1

        "${ip6tables_wait}" -t mangle -N CLASH_PRE || return 1
        
        for subnet in ${reserved_ip6[*]}; do
            "${ip6tables_wait}" -t mangle -A CLASH_PRE -d "${subnet}" -j RETURN
        done
        
        "${ip6tables_wait}" -t mangle -A CLASH_PRE -j MARK --set-xmark "${mark_id}" || return 1
        "${ip6tables_wait}" -t mangle -I PREROUTING -j CLASH_PRE || return 1
        
        "${ip6tables_wait}" -t mangle -N CLASH_OUT || return 1

        if [ "${mode}" = "blacklist" ]; then
            for appuid in ${apps}; do
                "${ip6tables_wait}" -t mangle -A CLASH_OUT -m owner --uid-owner "${appuid}" -j RETURN
            done
            "${ip6tables_wait}" -t mangle -A CLASH_OUT -j MARK --set-xmark "${mark_id}" || return 1
        elif [ "${mode}" = "whitelist" ]; then
            for appuid in ${apps}; do
                "${ip6tables_wait}" -t mangle -A CLASH_OUT -m owner --uid-owner "${appuid}" -j MARK --set-xmark "${mark_id}"
            done
        fi

        "${ip6tables_wait}" -t mangle -I OUTPUT -j CLASH_OUT || return 1
    } || {
        echo 1 > "/proc/sys/net/ipv6/conf/${tun_device}/disable_ipv6"
        "${ip6tables_wait}" -t mangle -I OUTPUT -j DROP
    }
}

cleanup_tun_mode() {
    ip -4 rule del fwmark "${mark_id}" lookup "${table_id}" 2>/dev/null
    ip -4 route del default dev "${tun_device}" table "${table_id}" 2>/dev/null
    
    "${iptables_wait}" -D FORWARD -o "${tun_device}" -j ACCEPT 2>/dev/null
    "${iptables_wait}" -D FORWARD -i "${tun_device}" -j ACCEPT 2>/dev/null
    
    "${iptables_wait}" -t mangle -D OUTPUT -j CLASH_OUT 2>/dev/null
    "${iptables_wait}" -t mangle -F CLASH_OUT 2>/dev/null
    "${iptables_wait}" -t mangle -X CLASH_OUT 2>/dev/null
    
    "${iptables_wait}" -t mangle -D PREROUTING -j CLASH_PRE 2>/dev/null
    "${iptables_wait}" -t mangle -F CLASH_PRE 2>/dev/null
    "${iptables_wait}" -t mangle -X CLASH_PRE 2>/dev/null
    
    [ "${ipv6}" = "true" ] && {
        ip -6 rule del fwmark "${mark_id}" lookup "${table_id}" 2>/dev/null
        ip -6 route del default dev "${tun_device}" table "${table_id}" 2>/dev/null
        
        "${ip6tables_wait}" -D FORWARD -o "${tun_device}" -j ACCEPT 2>/dev/null
        "${ip6tables_wait}" -D FORWARD -i "${tun_device}" -j ACCEPT 2>/dev/null
        
        "${ip6tables_wait}" -t mangle -D OUTPUT -j CLASH_OUT 2>/dev/null
        "${ip6tables_wait}" -t mangle -F CLASH_OUT 2>/dev/null
        "${ip6tables_wait}" -t mangle -X CLASH_OUT 2>/dev/null
        
        "${ip6tables_wait}" -t mangle -D PREROUTING -j CLASH_PRE 2>/dev/null
        "${ip6tables_wait}" -t mangle -F CLASH_PRE 2>/dev/null
        "${ip6tables_wait}" -t mangle -X CLASH_PRE 2>/dev/null
        
        "${ip6tables_wait}" -t mangle -D OUTPUT -j DROP 2>/dev/null
    }
}

case "$1" in
    -s)
        case "${mode}" in
            socks)
                [ "${clash_tun_status}" = "true" ] && {
                    log "SOCKS模式不能开启TUN"
                    exit 1
                }
                log "SOCKS模式"
                ;;
            blacklist|whitelist|global)
                if [ "${clash_tun_status}" = "true" ]; then
                    if [ "${clash_auto_route}" = "true" ]; then
                        "${iptables_wait}" -I FORWARD -o "${tun_device}" -j ACCEPT
                        "${iptables_wait}" -I FORWARD -i "${tun_device}" -j ACCEPT
                        
                        [ "${ipv6}" = "true" ] && {
                            "${ip6tables_wait}" -I FORWARD -o "${tun_device}" -j ACCEPT
                            "${ip6tables_wait}" -I FORWARD -i "${tun_device}" -j ACCEPT
                        }
                        log "TUN模式(auto-route)"
                    else
                        setup_tun_mode || {
                            log "TUN模式设置失败"
                            exit 1
                        }
                        log "TUN模式(手动路由)"
                    fi
                else
                    create_route_rules && apply_rules || {
                        log "tproxy模式设置失败"
                        exit 1
                    }
                    log "tproxy模式"
                fi
                ;;
            *)
                log "未知模式"
                exit 1
                ;;
        esac
        ;;
        
    -k)
        case "${mode}" in
            socks)
                ;;
            blacklist|whitelist|global)
                if [ "${clash_tun_status}" = "true" ]; then
                    cleanup_tun_mode
                else
                    flush_route_rules
                    flush_all_rules
                fi
                log "规则已清除"
                ;;
            *)
                log "未知模式"
                exit 1
                ;;
        esac
        ;;
        
    *)
        echo "Usage: $0 [-s|-k]"
        echo "  -s  启动服务"
        echo "  -k  停止服务"
        exit 1
        ;;
esac

exit 0